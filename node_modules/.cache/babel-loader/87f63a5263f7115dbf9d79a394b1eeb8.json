{"ast":null,"code":"var _jsxFileName = \"/Users/paulhan/PSU/CS410_frontend/frontend-homework/hw4/03-react/src/Houses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet backgroundColors = [\"rgba(54, 162, 235, 0.8)\", \"rgba(255, 206, 86, 0.8)\", \"rgba(255, 99, 132, 0.8)\", \"rgba(75, 192, 192, 0.8)\", \"rgba(153, 102, 255, 0.8)\", \"rgba(255, 159, 64, 0.8)\", \"rgba(199, 199, 199, 0.8)\", \"rgba(83, 102, 255, 0.8)\", \"rgba(40, 159, 64, 0.8)\", \"rgba(210, 199, 199, 0.8)\", \"rgba(190, 150, 120, 0.8)\"];\nlet borderColors = [\"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(255, 99, 132, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\", \"rgba(159, 159, 159, 1)\", \"rgba(83, 102, 255, 1)\", \"rgba(40, 159, 64, 1)\", \"rgba(210, 199, 199, 1)\", \"rgba(190, 150, 120, 1)\"];\n\nconst Houses = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let houses = [];\n    let chart_houses = [];\n    let famNames = [];\n    let count = [];\n    const url = \"https://thronesapi.com/api/v2/Characters\"; // get data from API using axios\n\n    axios.get(url).then(response => {\n      let getJson = response.data; // convert data to json & push each data element into houses array\n\n      getJson.forEach(element => {\n        let charFam = element.family;\n        let object = houses.find(x => x.name === charFam);\n\n        if (object) {\n          object.count += 1;\n        } else {\n          let family = {\n            name: charFam,\n            count: 1\n          };\n          houses.push(family);\n        }\n      }); // filter the houses array to only include count > 2\n\n      houses.forEach(element => {\n        if (element.count >= 2) {\n          let family = {\n            name: element.name,\n            count: element.count\n          };\n          chart_houses.push(family);\n        }\n      }); // separate house name & house count into individual arrays\n\n      chart_houses.forEach(element => {\n        famNames.push(element.name);\n        count.push(element.count);\n      }); // fill chart data\n\n      setChartData({\n        labels: famNames,\n        datasets: [{\n          data: count,\n          backgroundColor: backgroundColors,\n          borderColor: borderColors,\n          hoverOffset: 10\n        }]\n      });\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, []); // fix option\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"got-font\",\n      children: \"Game of Thrones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Family Name and House Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n      className: \"mychart\",\n      data: chartData,\n      options: {\n        responsive: true,\n        legend: \"bottom\",\n        title: {\n          text: \"GAME OF THRONES HOUSES\",\n          display: true\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Houses, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = Houses;\nexport default Houses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Houses\");","map":{"version":3,"sources":["/Users/paulhan/PSU/CS410_frontend/frontend-homework/hw4/03-react/src/Houses.js"],"names":["React","useState","useEffect","Doughnut","axios","backgroundColors","borderColors","Houses","chartData","setChartData","chart","houses","chart_houses","famNames","count","url","get","then","response","getJson","data","forEach","element","charFam","family","object","find","x","name","push","labels","datasets","backgroundColor","borderColor","hoverOffset","responsive","legend","title","text","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\n\nlet backgroundColors = [\n  \"rgba(54, 162, 235, 0.8)\",\n  \"rgba(255, 206, 86, 0.8)\",\n  \"rgba(255, 99, 132, 0.8)\",\n  \"rgba(75, 192, 192, 0.8)\",\n  \"rgba(153, 102, 255, 0.8)\",\n  \"rgba(255, 159, 64, 0.8)\",\n  \"rgba(199, 199, 199, 0.8)\",\n  \"rgba(83, 102, 255, 0.8)\",\n  \"rgba(40, 159, 64, 0.8)\",\n  \"rgba(210, 199, 199, 0.8)\",\n  \"rgba(190, 150, 120, 0.8)\",\n];\n\nlet borderColors = [\n  \"rgba(54, 162, 235, 1)\",\n  \"rgba(255, 206, 86, 1)\",\n  \"rgba(255, 99, 132, 1)\",\n  \"rgba(75, 192, 192, 1)\",\n  \"rgba(153, 102, 255, 1)\",\n  \"rgba(255, 159, 64, 1)\",\n  \"rgba(159, 159, 159, 1)\",\n  \"rgba(83, 102, 255, 1)\",\n  \"rgba(40, 159, 64, 1)\",\n  \"rgba(210, 199, 199, 1)\",\n  \"rgba(190, 150, 120, 1)\",\n];\n\nconst Houses = () => {\n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let houses = [];\n    let chart_houses = [];\n    let famNames = [];\n    let count = [];\n    const url = \"https://thronesapi.com/api/v2/Characters\";\n\n    // get data from API using axios\n    axios.get(url).then((response) => {\n      let getJson = response.data;\n\n      // convert data to json & push each data element into houses array\n      getJson.forEach((element) => {\n        let charFam = element.family;\n        let object = houses.find((x) => x.name === charFam);\n        if (object) {\n          object.count += 1;\n        } else {\n          let family = {\n            name: charFam,\n            count: 1,\n          };\n          houses.push(family);\n        }\n      });\n\n      // filter the houses array to only include count > 2\n      houses.forEach((element) => {\n        if (element.count >= 2) {\n          let family = {\n            name: element.name,\n            count: element.count,\n          };\n          chart_houses.push(family);\n        }\n      });\n\n      // separate house name & house count into individual arrays\n      chart_houses.forEach((element) => {\n        famNames.push(element.name);\n        count.push(element.count);\n      });\n\n      // fill chart data\n      setChartData({\n        labels: famNames,\n        datasets: [\n          {\n            data: count,\n            backgroundColor: backgroundColors,\n            borderColor: borderColors,\n            hoverOffset: 10\n          },\n        ],\n      });\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n\n  // fix option\n  return (\n    <div className=\"chart-container\">\n      <h1 class=\"got-font\">Game of Thrones</h1>\n      <h4>Family Name and House Count</h4>\n      <Doughnut\n        className=\"mychart\"\n        data={chartData}\n        options={{\n          responsive: true,\n          legend: \"bottom\",\n          title: { text: \"GAME OF THRONES HOUSES\", display: true }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Houses;\n"]},"metadata":{},"sourceType":"module"}